{
  "address": "0xab4F72AfF2713E125f4A6238A6cE9794C82670D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "RequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "RequestPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensCharged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_products",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_valuesProducts",
          "type": "uint256[]"
        }
      ],
      "name": "createRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "customer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "products",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "valuesProducts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getRequestsBySeller",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "payRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94b081d3aeba8a720cade7a07e9341f79685a76c6132848e1fa615d5223ddc9b",
  "receipt": {
    "to": null,
    "from": "0x4b384c703Fc9d8b7740bc176ca2b7A96eae0080A",
    "contractAddress": "0xab4F72AfF2713E125f4A6238A6cE9794C82670D7",
    "transactionIndex": 0,
    "gasUsed": "1226870",
    "logsBloom": "0x
    "blockHash": "0x0e9b4774ecc6323bfde9c2fab2396f36a581b386aee2a92e6547c9bde4945d3e",
    "transactionHash": "0x94b081d3aeba8a720cade7a07e9341f79685a76c6132848e1fa615d5223ddc9b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 85,
        "transactionHash": "0x94b081d3aeba8a720cade7a07e9341f79685a76c6132848e1fa615d5223ddc9b",
        "address": "0xab4F72AfF2713E125f4A6238A6cE9794C82670D7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b384c703fc9d8b7740bc176ca2b7a96eae0080a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0e9b4774ecc6323bfde9c2fab2396f36a581b386aee2a92e6547c9bde4945d3e"
      }
    ],
    "blockNumber": 85,
    "cumulativeGasUsed": "1226870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5A097048ec4c04a3503c8607A2e66f7AA7dE0AB7",
    "5000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2760bf04fc84cca3f672c9a29b55248a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"RequestPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensCharged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_products\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_valuesProducts\",\"type\":\"uint256[]\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"products\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesProducts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getRequestsBySeller\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"payRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ManagerRequests.sol\":\"ManagerRequests\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ManagerRequests.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ManagerRequests is Ownable {\\n  using Counters for Counters.Counter;\\n  using Address for address payable;\\n\\n  // Estrutura de dados para representar um pedido\\n  struct Request {\\n    uint256 id;\\n    address payable seller;\\n    address payable customer;\\n    uint256 date;\\n    string[] products;\\n    uint256[] quantities;\\n    uint256[] valuesProducts;\\n    bool paid;\\n  }\\n\\n  // Contador para gerar IDs \\u00fanicos\\n  Counters.Counter private requestIdCounter;\\n  // Mapeamento de ID de pedido para pedido\\n  mapping(uint256 => Request) private requests;\\n  // Mapea o id do request de acordo com o seller\\n  mapping(address => uint256[]) private sellerToRequestIds;\\n  // Endere\\u00e7o do contrato do token ERC-20\\n  address public governanceTokenAddress;\\n  // Quantidade de tokens a ser cobrada por pedido\\n  uint256 public tokenFee;\\n\\n  constructor(address _governanceTokenAddress, uint256 _tokenFee) {\\n    require(_governanceTokenAddress != address(0), \\\"Token address cannot be zero\\\");\\n    governanceTokenAddress = _governanceTokenAddress;\\n    tokenFee = _tokenFee;\\n  }\\n\\n  // Evento emitido quando um pedido \\u00e9 criado\\n  event RequestCreated(uint256 id, address customer, uint256 date);\\n  // Evento emitido quando um pedido \\u00e9 pago\\n  event RequestPaid(uint256 id, address customer, uint256 date);\\n  // Evento emitido quando tokens s\\u00e3o cobrados\\n  event TokensCharged(address indexed customer, uint256 amount);\\n  // Evento emitido quando a taxa \\u00e9 modificada\\n  event FeeChanged(uint256 amount);\\n\\n  // Modificador para verificar se o remetente tem saldo suficiente de tokens\\n  modifier hasSufficientTokens() {\\n    require(governanceTokenAddress != address(0), \\\"Token address not set\\\");\\n    require(\\n      IERC20(governanceTokenAddress).balanceOf(msg.sender) >= tokenFee,\\n      \\\"Insufficient tokens\\\"\\n    );\\n    _;\\n  }\\n\\n  // CREATE A NEW REQUEST\\n  function createRequest(\\n    address payable seller,\\n    string[] memory _products,\\n    uint256[] memory _quantities,\\n    uint256[] memory _valuesProducts\\n  ) external hasSufficientTokens {\\n    require(\\n      _products.length == _quantities.length && _quantities.length == _valuesProducts.length,\\n      \\\"Invalid input lengths\\\"\\n    );\\n\\n    // Incrementa o contador de IDs\\n    requestIdCounter.increment();\\n\\n    // Obt\\u00e9m o ID \\u00fanico para o novo pedido\\n    uint256 requestId = requestIdCounter.current();\\n\\n    // Obt\\u00e9m a data atual em timestamp\\n    uint256 currentDate = block.timestamp;\\n\\n    // Cria uma nova estrutura de pedido\\n    Request storage newRequest = requests[requestId];\\n    newRequest.id = requestId;\\n    newRequest.seller = seller;\\n    newRequest.customer = payable(msg.sender);\\n    newRequest.date = block.timestamp;\\n    newRequest.products = _products;\\n    newRequest.quantities = _quantities;\\n    newRequest.valuesProducts = _valuesProducts;\\n    newRequest.paid = false;\\n\\n    // Verifica se o contrato tem permiss\\u00e3o para gastar tokens do remetente\\n    _consumeFee();\\n\\n    // Adiciona o id do request para getter via seller posterior\\n    sellerToRequestIds[seller].push(requestId);\\n\\n    // Emite o evento de pedido criado\\n    emit RequestCreated(requestId, msg.sender, currentDate);\\n    // Emite o evento de cobran\\u00e7a de tokens\\n    emit TokensCharged(msg.sender, tokenFee);\\n  }\\n\\n  // SET A NEW FEE\\n  function setFee(uint256 amount) public onlyOwner {\\n    tokenFee = amount;\\n    emit FeeChanged(tokenFee);\\n  }\\n\\n  // CONSUME FEE WHEN CALLED\\n  function _consumeFee() internal {\\n    uint256 allowance = IERC20(governanceTokenAddress).allowance(msg.sender, address(this));\\n    require(allowance >= tokenFee, \\\"Insufficient allowance\\\");\\n    // Cobrar a quantia de tokens do remetente\\n    IERC20(governanceTokenAddress).transferFrom(msg.sender, address(this), tokenFee);\\n  }\\n\\n  // Pay request\\n  // Fun\\u00e7\\u00e3o para realizar o pagamento de um pedido\\n  function payRequest(uint256 requestId) external {\\n    Request storage request = requests[requestId];\\n\\n    // Verifica se o pedido existe\\n    require(request.id != 0, \\\"Request does not exist\\\");\\n    // Verifica se o pagamento ainda n\\u00e3o foi realizado\\n    require(!request.paid, \\\"Request already paid\\\");\\n    // Verifica se o remetente \\u00e9 o cliente que fez o pedido\\n    require(msg.sender == request.customer, \\\"Not the customer\\\");\\n\\n    // Realiza o pagamento cobrando a taxa por produto\\n    uint256 totalToPay = 0;\\n    for (uint256 i = 0; i < request.products.length; i++) {\\n      totalToPay += request.quantities[i] * request.valuesProducts[i];\\n    }\\n    totalToPay = totalToPay * (10 ** 18);\\n\\n    // Verifica se o contrato tem permiss\\u00e3o para gastar tokens do remetente\\n    uint256 allowance = IERC20(governanceTokenAddress).allowance(msg.sender, address(this));\\n    require(allowance >= totalToPay, \\\"Insufficient allowance\\\");\\n\\n    // Cobrar a quantia de tokens do remetente\\n    IERC20(governanceTokenAddress).transferFrom(msg.sender, request.seller, totalToPay);\\n    // Consome a taxa\\n    _consumeFee();\\n\\n    // Marca o pedido como pago\\n    request.paid = true;\\n\\n    // Obt\\u00e9m a data atual em timestamp\\n    uint256 currentDate = block.timestamp;\\n    emit RequestPaid(requestId, msg.sender, currentDate);\\n  }\\n\\n  // GET REQUEST BY ID\\n  function getRequest(\\n    uint256 _requestId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 id,\\n      address payable seller,\\n      address payable customer,\\n      uint256 date,\\n      string[] memory products, // Alterado para lista de strings\\n      uint256[] memory quantities,\\n      uint256[] memory valuesProducts,\\n      bool paid\\n    )\\n  {\\n    Request storage request = requests[_requestId];\\n    require(request.id != 0, \\\"Request does not exist\\\");\\n\\n    id = request.id;\\n    seller = request.seller;\\n    customer = request.customer;\\n    date = request.date;\\n    products = request.products;\\n    quantities = request.quantities;\\n    valuesProducts = request.valuesProducts;\\n    paid = request.paid;\\n  }\\n\\n  function getRequestsBySeller(address seller) public view returns (uint256[] memory) {\\n    // Retorna o \\u00edndice de pedidos associados a um vendedor espec\\u00edfico\\n    return sellerToRequestIds[seller];\\n  }\\n}\\n\",\"keccak256\":\"0xfeb088ec9653e4cf425d0382c0d4a7b39c9b32dd86cb2c284cb7d99017ef9ab9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161153a38038061153a83398101604081905261002f9161010b565b610038336100bb565b6001600160a01b0382166100925760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e20616464726573732063616e6e6f74206265207a65726f00000000604482015260640160405180910390fd5b600480546001600160a01b0319166001600160a01b039390931692909217909155600555610145565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561011e57600080fd5b82516001600160a01b038116811461013557600080fd5b6020939093015192949293505050565b6113e6806101546000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a2f5df5f11610066578063a2f5df5f14610114578063b42165d014610127578063c58343ef1461013a578063cfee8a8514610161578063f2fde38b1461018157600080fd5b806345599136146100a357806363d4dd3b146100bf57806369fe0e2d146100d4578063715018a6146100e75780638da5cb5b146100ef575b600080fd5b6100ac60055481565b6040519081526020015b60405180910390f35b6100d26100cd366004610de7565b610194565b005b6100d26100e2366004610de7565b6104be565b6100d2610501565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100b6565b6100d2610122366004610eeb565b610515565b6004546100fc906001600160a01b031681565b61014d610148366004610de7565b6107dc565b6040516100b6989796959493929190611085565b61017461016f366004611180565b610a09565b6040516100b691906111a4565b6100d261018f366004611180565b610a75565b600081815260026020526040812080549091036101f15760405162461bcd60e51b815260206004820152601660248201527514995c5d595cdd08191bd95cc81b9bdd08195e1a5cdd60521b60448201526064015b60405180910390fd5b600781015460ff161561023d5760405162461bcd60e51b815260206004820152601460248201527314995c5d595cdd08185b1c9958591e481c185a5960621b60448201526064016101e8565b60028101546001600160a01b0316331461028c5760405162461bcd60e51b815260206004820152601060248201526f2737ba103a34329031bab9ba37b6b2b960811b60448201526064016101e8565b6000805b6004830154811015610304578260060181815481106102b1576102b16111b7565b90600052602060002001548360050182815481106102d1576102d16111b7565b90600052602060002001546102e691906111e3565b6102f09083611200565b9150806102fc81611213565b915050610290565b5061031781670de0b6b3a76400006111e3565b60048054604051636eb1769f60e11b815233928101929092523060248301529192506000916001600160a01b03169063dd62ed3e90604401602060405180830381865afa15801561036c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610390919061122c565b9050818110156103db5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b60448201526064016101e8565b6004805460018501546040516323b872dd60e01b815233938101939093526001600160a01b0390811660248401526044830185905216906323b872dd906064016020604051808303816000875af115801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e9190611245565b50610467610aee565b60078301805460ff1916600117905560408051858152336020820152429181018290527fd5ac7a9a768c1aeccbb2f6af8f8b15cde55cd964b47d640e221661dd53bc229b9060600160405180910390a15050505050565b6104c6610c34565b60058190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c39060200160405180910390a150565b610509610c34565b6105136000610c8e565b565b6004546001600160a01b03166105655760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881859191c995cdcc81b9bdd081cd95d605a1b60448201526064016101e8565b600554600480546040516370a0823160e01b815233928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d5919061122c565b10156106195760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e7420746f6b656e7360681b60448201526064016101e8565b8151835114801561062b575080518251145b61066f5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e707574206c656e6774687360581b60448201526064016101e8565b61067d600180546001019055565b600061068860015490565b60008181526002602081815260409092208381556001810180546001600160a01b038b166001600160a01b03199182161790915591810180549092163317909155426003820181905587519394509290916106ea916004840191890190610cde565b5084516107009060058301906020880190610d34565b5083516107169060068301906020870190610d34565b5060078101805460ff1916905561072b610aee565b6001600160a01b0387166000908152600360209081526040808320805460018101825590845292829020909201859055815185815233918101919091529081018390527f0f07843fcc5047a6c0a2af35eec5eab563fa21efdc4473efb2303d6c2f8ec6f89060600160405180910390a160055460405190815233907f7fb2778aa5a297055d621e0d905ba831db6687c61ba1f33caabc4fded441a8749060200160405180910390a250505050505050565b600081815260026020526040812080548291829182916060918291829185919082036108435760405162461bcd60e51b815260206004820152601660248201527514995c5d595cdd08191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016101e8565b805460018201546002830154600384015460048501805460408051602080840282018101909252828152969f506001600160a01b039586169e50949093169b509099509160009084015b828210156109395783829060005260206000200180546108ac90611267565b80601f01602080910402602001604051908101604052809291908181526020018280546108d890611267565b80156109255780601f106108fa57610100808354040283529160200191610925565b820191906000526020600020905b81548152906001019060200180831161090857829003601f168201915b50505050508152602001906001019061088d565b5050505094508060050180548060200260200160405190810160405280929190818152602001828054801561098d57602002820191906000526020600020905b815481526020019060010190808311610979575b50505050509350806006018054806020026020016040519081016040528092919081815260200182805480156109e257602002820191906000526020600020905b8154815260200190600101908083116109ce575b505050505092508060070160009054906101000a900460ff16915050919395975091939597565b6001600160a01b038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610a6957602002820191906000526020600020905b815481526020019060010190808311610a55575b50505050509050919050565b610a7d610c34565b6001600160a01b038116610ae25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e8565b610aeb81610c8e565b50565b60048054604051636eb1769f60e11b815233928101929092523060248301526000916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b66919061122c565b9050600554811015610bb35760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b60448201526064016101e8565b600480546005546040516323b872dd60e01b8152339381019390935230602484015260448301526001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c309190611245565b5050565b6000546001600160a01b031633146105135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610d24579160200282015b82811115610d245782518290610d1490826112f0565b5091602001919060010190610cfe565b50610d30929150610d7b565b5090565b828054828255906000526020600020908101928215610d6f579160200282015b82811115610d6f578251825591602001919060010190610d54565b50610d30929150610d98565b80821115610d30576000610d8f8282610dad565b50600101610d7b565b5b80821115610d305760008155600101610d99565b508054610db990611267565b6000825580601f10610dc9575050565b601f016020900490600052602060002090810190610aeb9190610d98565b600060208284031215610df957600080fd5b5035919050565b6001600160a01b0381168114610aeb57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e5457610e54610e15565b604052919050565b600067ffffffffffffffff821115610e7657610e76610e15565b5060051b60200190565b600082601f830112610e9157600080fd5b81356020610ea6610ea183610e5c565b610e2b565b82815260059290921b84018101918181019086841115610ec557600080fd5b8286015b84811015610ee05780358352918301918301610ec9565b509695505050505050565b60008060008060808587031215610f0157600080fd5b8435610f0c81610e00565b935060208581013567ffffffffffffffff80821115610f2a57600080fd5b818801915088601f830112610f3e57600080fd5b8135610f4c610ea182610e5c565b81815260059190911b8301840190848101908b831115610f6b57600080fd5b8585015b83811015610ff557803585811115610f8657600080fd5b8601603f81018e13610f9757600080fd5b8781013586811115610fab57610fab610e15565b610fbd601f8201601f19168a01610e2b565b8181528f6040838501011115610fd35760008081fd5b81604084018b83013760009181018a0191909152845250918601918601610f6f565b5097505050604088013592508083111561100e57600080fd5b61101a89848a01610e80565b9450606088013592508083111561103057600080fd5b505061103e87828801610e80565b91505092959194509250565b600081518084526020808501945080840160005b8381101561107a5781518752958201959082019060010161105e565b509495945050505050565b8881526001600160a01b0388811660208084019190915290881660408301526060820187905261010060808301819052865190830181905260009161012080850192600581901b8601909101919089820185805b838110156111365788860361011f1901875282518051808852835b8181101561110f5782810188015189820189015287016110f4565b50878101870184905297860197601f01601f191690960185019550918401916001016110d9565b505050505083810360a085015261114d818861104a565b91505082810360c0840152611162818661104a565b91505061117360e083018415159052565b9998505050505050505050565b60006020828403121561119257600080fd5b813561119d81610e00565b9392505050565b60208152600061119d602083018461104a565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111fa576111fa6111cd565b92915050565b808201808211156111fa576111fa6111cd565b600060018201611225576112256111cd565b5060010190565b60006020828403121561123e57600080fd5b5051919050565b60006020828403121561125757600080fd5b8151801515811461119d57600080fd5b600181811c9082168061127b57607f821691505b60208210810361129b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156112eb57600081815260208120601f850160051c810160208610156112c85750805b601f850160051c820191505b818110156112e7578281556001016112d4565b5050505b505050565b815167ffffffffffffffff81111561130a5761130a610e15565b61131e816113188454611267565b846112a1565b602080601f831160018114611353576000841561133b5750858301515b600019600386901b1c1916600185901b1785556112e7565b600085815260208120601f198616915b8281101561138257888601518255948401946001909101908401611363565b50858210156113a05787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d5d5515c298c7de52f7c3edc97116e022b271f3fd3cac61a6b480d13fc486c3764736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/ManagerRequests.sol:ManagerRequests",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12993,
        "contract": "contracts/ManagerRequests.sol:ManagerRequests",
        "label": "requestIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)8771_storage"
      },
      {
        "astId": 12998,
        "contract": "contracts/ManagerRequests.sol:ManagerRequests",
        "label": "requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Request)12990_storage)"
      },
      {
        "astId": 13003,
        "contract": "contracts/ManagerRequests.sol:ManagerRequests",
        "label": "sellerToRequestIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 13005,
        "contract": "contracts/ManagerRequests.sol:ManagerRequests",
        "label": "governanceTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13007,
        "contract": "contracts/ManagerRequests.sol:ManagerRequests",
        "label": "tokenFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Request)12990_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ManagerRequests.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)12990_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)8771_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8770,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)12990_storage": {
        "encoding": "inplace",
        "label": "struct ManagerRequests.Request",
        "members": [
          {
            "astId": 12972,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12974,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 12976,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "customer",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 12978,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "date",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12981,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "products",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 12984,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "quantities",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12987,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "valuesProducts",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12989,
            "contract": "contracts/ManagerRequests.sol:ManagerRequests",
            "label": "paid",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}