/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ManagerRequestsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRequest"
      | "getRequest"
      | "getRequestsBySeller"
      | "governanceTokenAddress"
      | "owner"
      | "payRequest"
      | "renounceOwnership"
      | "setFee"
      | "tokenFee"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeChanged"
      | "OwnershipTransferred"
      | "RequestCreated"
      | "RequestPaid"
      | "TokensCharged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRequest",
    values: [AddressLike, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsBySeller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FeeChangedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    customer: AddressLike,
    date: BigNumberish
  ];
  export type OutputTuple = [id: bigint, customer: string, date: bigint];
  export interface OutputObject {
    id: bigint;
    customer: string;
    date: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestPaidEvent {
  export type InputTuple = [
    id: BigNumberish,
    customer: AddressLike,
    date: BigNumberish
  ];
  export type OutputTuple = [id: bigint, customer: string, date: bigint];
  export interface OutputObject {
    id: bigint;
    customer: string;
    date: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensChargedEvent {
  export type InputTuple = [customer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [customer: string, amount: bigint];
  export interface OutputObject {
    customer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ManagerRequests extends BaseContract {
  connect(runner?: ContractRunner | null): ManagerRequests;
  waitForDeployment(): Promise<this>;

  interface: ManagerRequestsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRequest: TypedContractMethod<
    [
      seller: AddressLike,
      _products: string[],
      _quantities: BigNumberish[],
      _valuesProducts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getRequest: TypedContractMethod<
    [_requestId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string[],
        bigint[],
        bigint[],
        boolean
      ] & {
        id: bigint;
        seller: string;
        customer: string;
        date: bigint;
        products: string[];
        quantities: bigint[];
        valuesProducts: bigint[];
        paid: boolean;
      }
    ],
    "view"
  >;

  getRequestsBySeller: TypedContractMethod<
    [seller: AddressLike],
    [bigint[]],
    "view"
  >;

  governanceTokenAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFee: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  tokenFee: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRequest"
  ): TypedContractMethod<
    [
      seller: AddressLike,
      _products: string[],
      _quantities: BigNumberish[],
      _valuesProducts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRequest"
  ): TypedContractMethod<
    [_requestId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string[],
        bigint[],
        bigint[],
        boolean
      ] & {
        id: bigint;
        seller: string;
        customer: string;
        date: bigint;
        products: string[];
        quantities: bigint[];
        valuesProducts: bigint[];
        paid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestsBySeller"
  ): TypedContractMethod<[seller: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "governanceTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeChanged"
  ): TypedContractEvent<
    FeeChangedEvent.InputTuple,
    FeeChangedEvent.OutputTuple,
    FeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestCreated"
  ): TypedContractEvent<
    RequestCreatedEvent.InputTuple,
    RequestCreatedEvent.OutputTuple,
    RequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestPaid"
  ): TypedContractEvent<
    RequestPaidEvent.InputTuple,
    RequestPaidEvent.OutputTuple,
    RequestPaidEvent.OutputObject
  >;
  getEvent(
    key: "TokensCharged"
  ): TypedContractEvent<
    TokensChargedEvent.InputTuple,
    TokensChargedEvent.OutputTuple,
    TokensChargedEvent.OutputObject
  >;

  filters: {
    "FeeChanged(uint256)": TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;
    FeeChanged: TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestCreated(uint256,address,uint256)": TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;
    RequestCreated: TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;

    "RequestPaid(uint256,address,uint256)": TypedContractEvent<
      RequestPaidEvent.InputTuple,
      RequestPaidEvent.OutputTuple,
      RequestPaidEvent.OutputObject
    >;
    RequestPaid: TypedContractEvent<
      RequestPaidEvent.InputTuple,
      RequestPaidEvent.OutputTuple,
      RequestPaidEvent.OutputObject
    >;

    "TokensCharged(address,uint256)": TypedContractEvent<
      TokensChargedEvent.InputTuple,
      TokensChargedEvent.OutputTuple,
      TokensChargedEvent.OutputObject
    >;
    TokensCharged: TypedContractEvent<
      TokensChargedEvent.InputTuple,
      TokensChargedEvent.OutputTuple,
      TokensChargedEvent.OutputObject
    >;
  };
}
